# coding: utf-8

"""
    Clinic Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConsultationUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consultation_id': 'object',
        'client_id': 'object',
        'pet_id': 'object',
        'date_time': 'object',
        'description': 'object'
    }

    attribute_map = {
        'consultation_id': 'consultation_id',
        'client_id': 'client_id',
        'pet_id': 'pet_id',
        'date_time': 'date_time',
        'description': 'description'
    }

    def __init__(self, consultation_id=None, client_id=None, pet_id=None, date_time=None, description=None):  # noqa: E501
        """ConsultationUpdate - a model defined in Swagger"""  # noqa: E501
        self._consultation_id = None
        self._client_id = None
        self._pet_id = None
        self._date_time = None
        self._description = None
        self.discriminator = None
        self.consultation_id = consultation_id
        if client_id is not None:
            self.client_id = client_id
        if pet_id is not None:
            self.pet_id = pet_id
        if date_time is not None:
            self.date_time = date_time
        if description is not None:
            self.description = description

    @property
    def consultation_id(self):
        """Gets the consultation_id of this ConsultationUpdate.  # noqa: E501


        :return: The consultation_id of this ConsultationUpdate.  # noqa: E501
        :rtype: object
        """
        return self._consultation_id

    @consultation_id.setter
    def consultation_id(self, consultation_id):
        """Sets the consultation_id of this ConsultationUpdate.


        :param consultation_id: The consultation_id of this ConsultationUpdate.  # noqa: E501
        :type: object
        """
        if consultation_id is None:
            raise ValueError("Invalid value for `consultation_id`, must not be `None`")  # noqa: E501

        self._consultation_id = consultation_id

    @property
    def client_id(self):
        """Gets the client_id of this ConsultationUpdate.  # noqa: E501


        :return: The client_id of this ConsultationUpdate.  # noqa: E501
        :rtype: object
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ConsultationUpdate.


        :param client_id: The client_id of this ConsultationUpdate.  # noqa: E501
        :type: object
        """

        self._client_id = client_id

    @property
    def pet_id(self):
        """Gets the pet_id of this ConsultationUpdate.  # noqa: E501


        :return: The pet_id of this ConsultationUpdate.  # noqa: E501
        :rtype: object
        """
        return self._pet_id

    @pet_id.setter
    def pet_id(self, pet_id):
        """Sets the pet_id of this ConsultationUpdate.


        :param pet_id: The pet_id of this ConsultationUpdate.  # noqa: E501
        :type: object
        """

        self._pet_id = pet_id

    @property
    def date_time(self):
        """Gets the date_time of this ConsultationUpdate.  # noqa: E501


        :return: The date_time of this ConsultationUpdate.  # noqa: E501
        :rtype: object
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this ConsultationUpdate.


        :param date_time: The date_time of this ConsultationUpdate.  # noqa: E501
        :type: object
        """

        self._date_time = date_time

    @property
    def description(self):
        """Gets the description of this ConsultationUpdate.  # noqa: E501


        :return: The description of this ConsultationUpdate.  # noqa: E501
        :rtype: object
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConsultationUpdate.


        :param description: The description of this ConsultationUpdate.  # noqa: E501
        :type: object
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConsultationUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConsultationUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
