# coding: utf-8

"""
    Clinic Service

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'object',
        'sur_name': 'object',
        'first_name': 'object',
        'patronymic': 'object',
        'birthday': 'object',
        'client_id': 'object'
    }

    attribute_map = {
        'document': 'document',
        'sur_name': 'sur_name',
        'first_name': 'first_name',
        'patronymic': 'patronymic',
        'birthday': 'birthday',
        'client_id': 'client_id'
    }

    def __init__(self, document=None, sur_name=None, first_name=None, patronymic=None, birthday=None, client_id=None):  # noqa: E501
        """ClientOut - a model defined in Swagger"""  # noqa: E501
        self._document = None
        self._sur_name = None
        self._first_name = None
        self._patronymic = None
        self._birthday = None
        self._client_id = None
        self.discriminator = None
        self.document = document
        self.sur_name = sur_name
        self.first_name = first_name
        self.patronymic = patronymic
        self.birthday = birthday
        self.client_id = client_id

    @property
    def document(self):
        """Gets the document of this ClientOut.  # noqa: E501


        :return: The document of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this ClientOut.


        :param document: The document of this ClientOut.  # noqa: E501
        :type: object
        """
        if document is None:
            raise ValueError("Invalid value for `document`, must not be `None`")  # noqa: E501

        self._document = document

    @property
    def sur_name(self):
        """Gets the sur_name of this ClientOut.  # noqa: E501


        :return: The sur_name of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._sur_name

    @sur_name.setter
    def sur_name(self, sur_name):
        """Sets the sur_name of this ClientOut.


        :param sur_name: The sur_name of this ClientOut.  # noqa: E501
        :type: object
        """
        if sur_name is None:
            raise ValueError("Invalid value for `sur_name`, must not be `None`")  # noqa: E501

        self._sur_name = sur_name

    @property
    def first_name(self):
        """Gets the first_name of this ClientOut.  # noqa: E501


        :return: The first_name of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ClientOut.


        :param first_name: The first_name of this ClientOut.  # noqa: E501
        :type: object
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def patronymic(self):
        """Gets the patronymic of this ClientOut.  # noqa: E501


        :return: The patronymic of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._patronymic

    @patronymic.setter
    def patronymic(self, patronymic):
        """Sets the patronymic of this ClientOut.


        :param patronymic: The patronymic of this ClientOut.  # noqa: E501
        :type: object
        """
        if patronymic is None:
            raise ValueError("Invalid value for `patronymic`, must not be `None`")  # noqa: E501

        self._patronymic = patronymic

    @property
    def birthday(self):
        """Gets the birthday of this ClientOut.  # noqa: E501


        :return: The birthday of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this ClientOut.


        :param birthday: The birthday of this ClientOut.  # noqa: E501
        :type: object
        """
        if birthday is None:
            raise ValueError("Invalid value for `birthday`, must not be `None`")  # noqa: E501

        self._birthday = birthday

    @property
    def client_id(self):
        """Gets the client_id of this ClientOut.  # noqa: E501


        :return: The client_id of this ClientOut.  # noqa: E501
        :rtype: object
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this ClientOut.


        :param client_id: The client_id of this ClientOut.  # noqa: E501
        :type: object
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientOut, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
